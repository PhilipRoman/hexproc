#pragma once

// Utilities for generating Java class files with Hexproc

#define VERSION(major, minor) [2](minor) [2](44 + major)

#define TABLE_LENGTH(N) [2](N)

#define INCREMENT(name) name := name + 1;
_next_index := 1
#define CONSTANT_POOL [2]_next_index

#define ENTRY(type, name) \
	[1]type \
	name := _next_index; \
	INCREMENT(_next_index)

#define UTF8(name, bytes) \
	ENTRY(utf8, name) \
	[2](name.end - name.start) \
	name.start: bytes name.end:

#define INTEGER(name, value) ENTRY(int, name) [int]value

#define FLOAT(name, value) ENTRY(int, name) [float]value

// long and double entries take two slots
#define LONG(name, value) ENTRY(int, name) INCREMENT(_next_index) [long]value

#define DOUBLE(name, value) ENTRY(int, name) INCREMENT(_next_index) [double]value

#define CLASS(name, identifier) \
	ENTRY(class, name) \
	[2](name + 1) \
	UTF8(utf8.classname.name, identifier)

#define STRING(name, text) \
	ENTRY(string, name) \
	[2](name + 1) \
	UTF8(utf8.string.data, text)

#define FIELD(name, class, ident, type) \
	ENTRY(field, name) \
	[2]class [2](name + 1) \
	NAME_AND_TYPE(nat.field.name, ident, type)

#define METHOD(name, class, ident, type) \
	ENTRY(method, name) \
	[2]class [2](name + 1) \
	NAME_AND_TYPE(nat.method.name, ident, type)

#define INTERFACE_METHOD(name, class, ident, type) \
	ENTRY(interface, name) \
	[2]class [2](name + 1) \
	NAME_AND_TYPE(nat.imethod.name, ident, type)

#define PACKAGE(name, ident) \
	ENTRY(package, name) \
	[2]_next_index \
	UTF8(utf8.package.name, ident)

#define NAME_AND_TYPE(name, ident, type) \
	ENTRY(nametype, name) \
	[2](name + 1) [2](name + 2) \
	UTF8(utf8.nat._name.name, ident) \
	UTF8(utf8.nat._type.name, type)

#define getstatic(field_index) b2 [2](field_index)
#define ldc(pool_index) 12 [1](pool_index)
#define invokevirtual(method_index) b6 [2](method_index)
#define return_void b1

public =      0x0001
private =     0x0002
protected =   0x0004
static =      0x0008
final =       0x0010
super =       0x0020
synchronized= 0x0020
bridge =      0x0040
varargs =     0x0080
native =      0x0100
interface =   0x0200
abstract =    0x0400
strict =      0x0800
synthetic =   0x1000
annotation =  0x2000
enum =        0x4000

utf8 =      1
int =       3
float =     4
long =      5
double =    6
class =     7
string =    8
field =     9
method =    10
interface = 11
nametype =  12
mhandle =   15
mtype =     16
dynamic =   17
invokedyn = 18
module =    19
package =   20
